#user www-data;
daemon off;
worker_processes auto;
worker_rlimit_nofile 8192;

pid /etc/nginx/logs/nginx.pid;

events {
    worker_connections 8000;
    multi_accept on;
    use epoll;
}

http {

    ##
    # Basic Settings
    ##
    resolver 8.8.8.8 8.8.4.4 valid=10s;
    resolver_timeout 10s;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    server_names_hash_bucket_size 64;
    server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;
    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;

    types {
        application/font-woff2  woff2;
    }

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    ##
    # nginx-naxsi config
    ##
    # Uncomment it if you installed nginx-naxsi
    ##

    #include /etc/nginx/naxsi_core.rules;

    ##
    # Virtual Host Configs
    ##

    #include /etc/nginx/conf.d/*.conf;
    #include /etc/nginx/sites-enabled/*;

    upstream api {
        server api:80;
        keepalive 64;
    }

    server {
        listen 80;
        server_name dms.reality-connect.pt;

        root /src;

        index index.html;

        access_log off;
        #error_log off;

        error_page 500  /500.html;
        error_page 502  /502.html;
        error_page 404  /404.html;

        location ~ ^/(api|auth|prerender/|image/|explorer|health|webhooks) {
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            #proxy_cache one;
            #proxy_cache_key sfs$request_uri$scheme;
            proxy_pass http://api;
            add_header Cache-Control "no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0";
        }

        location ~ ^/websocket {
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_pass http://api;
            add_header Cache-Control "no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0";
        }

        location ~ \.(png|jpg|jpeg|gif|ico|woff|ttf|svg|eot|otf)$ {
            expires 1M;
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public";
            try_files /dist/$uri =404;
        }

        location ~ \.(js|css)$ {
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            try_files /dist/$uri =404;
        }

        location ~* \.(?:json|xml|txt)$ {
            add_header Pragma public;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            try_files /dist/$uri =404;
        }

        location ~* \.(html)$ {
            expires 1h;
            add_header Pragma public;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            try_files /dist/$uri /dist/index.html =404;
        }

        location ~ ^/admin {
            try_files /dist/admin/$uri /dist/admin/index.html =404;
        }

        ### Proxy sitemap request to cloudtasks.io
        location ~ ^/(sitemap) {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host prerender.cloudtasks.io;
            rewrite ^(.*)$ /54d6e06dfe30813f526ffea7$1 break;
            proxy_pass http://prerender.cloudtasks.io;
        }

        error_page 418 = @website;
        recursive_error_pages on;

        location / {
            ### If a bot requests an escaped URL then rewrite the request to cloudtasks.io location
            set $prerender 0;
            if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                set $prerender 1;
            }
            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }
            if ($http_user_agent ~ "cloudtasks_prerender") {
                set $prerender 0;
            }
            if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
                set $prerender 0;
            }

            ### cloudtasks.io location to handle proxyfication to cloudtasks.io API
            if ($prerender = 1) {
                rewrite ^(.*)$ /54d6e06dfe30813f526ffea7$1 break;
                proxy_pass http://prerender.cloudtasks.io;
            }

            if ($prerender = 0) {
                return 418;
            }
        }

        location @website {
            try_files /dist/$uri /dist/index.html =404;
        }

        location = /500.html {
            add_header Cache-Control "no-cache" always;
            access_log off;
            try_files /dist/errors/500.html =404;
        }

        location = /502.html {
            add_header Cache-Control "no-cache" always;
            access_log off;
            try_files /dist/errors/502.html =404;
        }

        location = /404.html {
            add_header Cache-Control "no-cache" always;
            access_log off;
            try_files /dist/errors/404.html =404;
        }
    }

    server {
        listen 80;
        server_name dms.ctcdn.co;
        root /src;

        access_log off;
        #error_log off;

        error_page 404  /404.html;

        location ~ \.(png|jpg|jpeg|gif|ico|woff|ttf|svg|eot|otf)$ {
            add_header "Access-Control-Allow-Origin" "*";
            expires 1M;
            add_header Pragma public;
            add_header Cache-Control "public";
            try_files /dist/$uri =404;
        }

        location ~ \.(js|css)$ {
            add_header "Access-Control-Allow-Origin" "*";
						expires 1w;
            add_header Pragma public;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            try_files /dist/$uri =404;
        }

        location / {
            add_header "Access-Control-Allow-Origin" "*";
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            try_files /dist/$uri =404;
        }

        location = /404.html {
            add_header Cache-Control "no-cache" always;
            try_files /dist/errors/404.html =404;
        }
    }

}
